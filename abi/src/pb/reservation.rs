// This file is @generated by prost-build.
/// Core reservation object. Contains all the information for a reservation
/// if ListenResponse op is DELETE, only id will be populated
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Reservation {
    /// unique id for the reservation, if put into ReservationRequest, id should be empty
    #[prost(int64, tag = "1")]
    pub id: i64,
    /// user id for the reservation
    #[prost(string, tag = "2")]
    pub user_id: ::prost::alloc::string::String,
    /// reservation status, used for differentating purpose
    #[prost(enumeration = "ReservationStatus", tag = "3")]
    pub status: i32,
    /// resource id for the reservation
    #[prost(string, tag = "4")]
    pub resource_id: ::prost::alloc::string::String,
    /// start time for the reservation
    #[prost(message, optional, tag = "5")]
    pub start: ::core::option::Option<::prost_types::Timestamp>,
    /// end time for the reservation
    #[prost(message, optional, tag = "6")]
    pub end: ::core::option::Option<::prost_types::Timestamp>,
    /// extra note
    #[prost(string, tag = "7")]
    pub note: ::prost::alloc::string::String,
}
/// To make a reservation, send a ReservationRequest with Reservation object (id should be empty)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReserveRequest {
    #[prost(message, optional, tag = "1")]
    pub reservation: ::core::option::Option<Reservation>,
}
/// Created reservation will be returned in ReserveResponse
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReserveResponse {
    #[prost(message, optional, tag = "1")]
    pub reservation: ::core::option::Option<Reservation>,
}
/// To update a reservation, send an UpdateRequest. Only note is updatable.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateRequest {
    #[prost(int64, tag = "1")]
    pub id: i64,
    #[prost(string, tag = "2")]
    pub note: ::prost::alloc::string::String,
}
/// Updated reservation will be returned in UpdateResponse
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateResponse {
    #[prost(message, optional, tag = "1")]
    pub reservation: ::core::option::Option<Reservation>,
}
/// To change a reservation from pending to confirmed, send a ConfirmRequest
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ConfirmRequest {
    #[prost(int64, tag = "1")]
    pub id: i64,
}
/// Confirmed reservation will be returned in ConfirmResponse
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConfirmResponse {
    #[prost(message, optional, tag = "1")]
    pub reservation: ::core::option::Option<Reservation>,
}
/// To cancel a reservation, send a CancelRequest
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CancelRequest {
    #[prost(int64, tag = "1")]
    pub id: i64,
}
/// Canceled reservation will be returned in CancelResponse
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CancelResponse {
    #[prost(message, optional, tag = "1")]
    pub reservation: ::core::option::Option<Reservation>,
}
/// To get a reservation, send a GetRequest
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetRequest {
    #[prost(int64, tag = "1")]
    pub id: i64,
}
/// Reservation will be returned in GetResponse
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetResponse {
    #[prost(message, optional, tag = "1")]
    pub reservation: ::core::option::Option<Reservation>,
}
/// query reservations with user id, resource id, start time, end time, and status
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReservationQuery {
    /// resource id for the reservation query. If empty, query all resources
    #[prost(string, tag = "1")]
    pub resource_id: ::prost::alloc::string::String,
    /// user id for the reservation query. If empty, query all users
    #[prost(string, tag = "2")]
    pub user_id: ::prost::alloc::string::String,
    /// use status to filter result. If UNKNOWN, return all reservations
    #[prost(enumeration = "ReservationStatus", tag = "3")]
    pub status: i32,
    /// start time for the reservation query, if 0, use Infinity for start time
    #[prost(message, optional, tag = "4")]
    pub start: ::core::option::Option<::prost_types::Timestamp>,
    /// end time for the reservation query, if 0, use Infinity for end time
    #[prost(message, optional, tag = "5")]
    pub end: ::core::option::Option<::prost_types::Timestamp>,
    /// sort direction
    #[prost(bool, tag = "6")]
    pub desc: bool,
}
/// To query reservations, send a QueryRequest
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryRequest {
    #[prost(message, optional, tag = "1")]
    pub query: ::core::option::Option<ReservationQuery>,
}
/// query reservations, order by reservation id
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReservationFilter {
    /// resource id for the reservation query. If empty, query all resources
    #[prost(string, tag = "1")]
    pub resource_id: ::prost::alloc::string::String,
    /// user id for the reservation query. If empty, query all users
    #[prost(string, tag = "2")]
    pub user_id: ::prost::alloc::string::String,
    /// use status to filter result. If UNKNOWN, return all reservations
    #[prost(enumeration = "ReservationStatus", tag = "3")]
    pub status: i32,
    #[prost(int64, optional, tag = "4")]
    pub cursor: ::core::option::Option<i64>,
    /// page size for the query
    #[prost(int64, tag = "5")]
    pub page_size: i64,
    /// sort direction
    #[prost(bool, tag = "6")]
    pub desc: bool,
}
/// To query reservations, send a QueryRequest
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FilterRequest {
    #[prost(message, optional, tag = "1")]
    pub filter: ::core::option::Option<ReservationFilter>,
}
/// filter pager info
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FilterPager {
    #[prost(int64, optional, tag = "1")]
    pub prev: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "2")]
    pub next: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "3")]
    pub total: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FilterResponse {
    #[prost(message, repeated, tag = "1")]
    pub reservations: ::prost::alloc::vec::Vec<Reservation>,
    #[prost(message, optional, tag = "2")]
    pub pager: ::core::option::Option<FilterPager>,
}
/// Client can listen to reservation updates by sending a ListenRequest
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ListenRequest {}
/// Server will send ListenResponse to client in streaming response
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListenResponse {
    /// update type
    #[prost(enumeration = "ReservationUpdateType", tag = "1")]
    pub op: i32,
    /// id for updated reservation
    #[prost(message, optional, tag = "2")]
    pub reservation: ::core::option::Option<Reservation>,
}
/// reservation status for a given time period
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ReservationStatus {
    Unknown = 0,
    Pending = 1,
    Confirmed = 2,
    Blocked = 3,
}
impl ReservationStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "RESERVATION_STATUS_UNKNOWN",
            Self::Pending => "RESERVATION_STATUS_PENDING",
            Self::Confirmed => "RESERVATION_STATUS_CONFIRMED",
            Self::Blocked => "RESERVATION_STATUS_BLOCKED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RESERVATION_STATUS_UNKNOWN" => Some(Self::Unknown),
            "RESERVATION_STATUS_PENDING" => Some(Self::Pending),
            "RESERVATION_STATUS_CONFIRMED" => Some(Self::Confirmed),
            "RESERVATION_STATUS_BLOCKED" => Some(Self::Blocked),
            _ => None,
        }
    }
}
/// when reservation is updated, record the update type
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ReservationUpdateType {
    Unknown = 0,
    Create = 1,
    Update = 2,
    Delete = 3,
}
impl ReservationUpdateType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "RESERVATION_UPDATE_TYPE_UNKNOWN",
            Self::Create => "RESERVATION_UPDATE_TYPE_CREATE",
            Self::Update => "RESERVATION_UPDATE_TYPE_UPDATE",
            Self::Delete => "RESERVATION_UPDATE_TYPE_DELETE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RESERVATION_UPDATE_TYPE_UNKNOWN" => Some(Self::Unknown),
            "RESERVATION_UPDATE_TYPE_CREATE" => Some(Self::Create),
            "RESERVATION_UPDATE_TYPE_UPDATE" => Some(Self::Update),
            "RESERVATION_UPDATE_TYPE_DELETE" => Some(Self::Delete),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod reservation_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::http::Uri;
    use tonic::codegen::*;
    /// Reservation service
    #[derive(Debug, Clone)]
    pub struct ReservationServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ReservationServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ReservationServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ReservationServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                    http::Request<tonic::body::Body>,
                    Response = http::Response<
                        <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                    >,
                >,
            <T as tonic::codegen::Service<http::Request<tonic::body::Body>>>::Error:
                Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ReservationServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// make a reservation
        pub async fn reserve(
            &mut self,
            request: impl tonic::IntoRequest<super::ReserveRequest>,
        ) -> std::result::Result<tonic::Response<super::ReserveResponse>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/reservation.ReservationService/reserve");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("reservation.ReservationService", "reserve"));
            self.inner.unary(req, path, codec).await
        }
        /// confirm a pending reservation, if reservation is not pending, do nothing
        pub async fn confirm(
            &mut self,
            request: impl tonic::IntoRequest<super::ConfirmRequest>,
        ) -> std::result::Result<tonic::Response<super::ConfirmResponse>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/reservation.ReservationService/confirm");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("reservation.ReservationService", "confirm"));
            self.inner.unary(req, path, codec).await
        }
        /// update the reservation note
        pub async fn update(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateRequest>,
        ) -> std::result::Result<tonic::Response<super::UpdateResponse>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/reservation.ReservationService/update");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("reservation.ReservationService", "update"));
            self.inner.unary(req, path, codec).await
        }
        /// cancel a reservation
        pub async fn cancel(
            &mut self,
            request: impl tonic::IntoRequest<super::CancelRequest>,
        ) -> std::result::Result<tonic::Response<super::CancelResponse>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/reservation.ReservationService/cancel");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("reservation.ReservationService", "cancel"));
            self.inner.unary(req, path, codec).await
        }
        /// get a reservation by id
        pub async fn get(
            &mut self,
            request: impl tonic::IntoRequest<super::GetRequest>,
        ) -> std::result::Result<tonic::Response<super::GetResponse>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/reservation.ReservationService/get");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("reservation.ReservationService", "get"));
            self.inner.unary(req, path, codec).await
        }
        /// query reservations by resource id, user id, status, start time, end time
        pub async fn query(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::Reservation>>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/reservation.ReservationService/query");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("reservation.ReservationService", "query"));
            self.inner.server_streaming(req, path, codec).await
        }
        /// filter reservations, order by reservation id
        pub async fn filter(
            &mut self,
            request: impl tonic::IntoRequest<super::FilterRequest>,
        ) -> std::result::Result<tonic::Response<super::FilterResponse>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/reservation.ReservationService/filter");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("reservation.ReservationService", "filter"));
            self.inner.unary(req, path, codec).await
        }
        /// another system could monitor newly added/confirmed/cancelled reservations
        pub async fn listen(
            &mut self,
            request: impl tonic::IntoRequest<super::ListenRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::Reservation>>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/reservation.ReservationService/listen");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("reservation.ReservationService", "listen"));
            self.inner.server_streaming(req, path, codec).await
        }
    }
}
